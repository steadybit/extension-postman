name: ci

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: '^1.20.0'

      - name: Audit
        run: |
          go mod download
          make audit

  build-images:
    name: Build Docker Images
    needs:
      - audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: steadybit/extension-postman

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            NAME=${{ github.repository }}
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ github.sha }}

  test-helm-charts:
    name: "Test Helm Charts"
    runs-on: ubuntu-latest
    needs:
      - build-images
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.9.0

      - name: Add dependency chart repos
        run: |
          helm repo add steadybit https://steadybit.github.io/helm-charts

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Add unit testing plugin
        run: |
          helm plugin install https://github.com/quintush/helm-unittest

      - name: Run unit tests
        run: make charttesting

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.3.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        if: github.event_name == 'pull_request'
        run: |
          changed=$(ct list-changed --config ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi

      - name: Run chart-testing (lint)
        run: ct lint --config chartTesting.yaml
        if: github.event_name == 'pull_request'

      - name: Create kind cluster
        uses: helm/kind-action@v1.5.0
        if: steps.list-changed.outputs.changed == 'true'

      - name: Run chart-testing (install)
        run: ct install --config chartTesting.yaml


  release-helm-chart:
    name: "Release Helm Chart"
    runs-on: ubuntu-latest
    needs:
      - test-helm-charts
    if: github.event_name != 'pull_request'

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.1

      - name: Add dependency chart repos
        run: |
          helm repo add steadybit https://steadybit.github.io/helm-charts

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.5.0
        with:
          charts_dir: charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
